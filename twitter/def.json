{
  "name": "Twitter Streaming",
  "description": "Use this source to pull tweets into Elasticsearch. You can stream specific user's tweets or search topics.",
  "groups": [
    {
      "key": "connectionInformation",
      "title": "Twitter Development Credentials",
      "description": "Provide the details below, which come from your Twitter development account. Go to https://apps.twitter.com to manage yours."
    },
    {
      "key": "searchInformation",
      "title": "Twitter Search Information",
      "description": "Provide a comma delimited list of users or topics to follow. You must provide at least one user or topic. "
    }
  ],
  "parameters": [
    {
      "type": "text",
      "group": "connectionInformation",
      "name": "consumerKey",
      "label": "Consumer Key",
      "description": "The Consumer Key from the Twitter dev portal.",
      "required": true
    },
    {
      "type": "text",
      "group": "connectionInformation",
      "name": "consumerSecret",
      "label": "Consumer Secret",
      "description": "The Consumer Secret from the Twitter dev portal.",
      "required": true
    },
    {
      "type": "text",
      "group": "connectionInformation",
      "name": "accessToken",
      "label": "Access Token",
      "description": "The Access Token from the Twitter dev portal.",
      "required": true
    },
    {
      "type": "text",
      "group": "connectionInformation",
      "name": "accessSecret",
      "label": "Access Secret",
      "description": "The Access Secret from the Twitter dev portal.",
      "required": true
    },
    {
      "type": "text",
      "group": "searchInformation",
      "name": "users",
      "label": "Users to Follow",
      "placeholder": "users",
      "description": "Follow multiple users by providing a comma seperated list.",
      "required": false
    },
    {
      "type": "text",
      "group": "searchInformation",
      "name": "topics",
      "label": "Topics to Follow",
      "placeholder": "topics",
      "description": "Follow multiple topics by providing a comma seperated list.",
      "required": false
    },
    {
      "type": "boolean",
      "group": "searchInformation",
      "name": "retweets",
      "label": "Include Retweets?",
      "description": "Set this to true if you want to include retweets. This can drastically increase your incoming tweet volume."
    },
    {
      "type": "boolean",
      "group": "searchInformation",
      "name": "verified",
      "label": "Verified Accounts Only?",
      "description": "Set this to true if you want to include only tweets from verified accounts."
    }
  ],
  "flow": {
    "label": "{{_name}}",
    "nodes": [
      {
        "id": "{{_id}}-core-1",
        "type": "comment",
        "name": "Load Configuration on Start-Up",
        "info": "",
        "x": 170,
        "y": 40,
        "wires": []
      },
      {
        "id": "{{_id}}-core-2",
        "type": "inject",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "x": 130,
        "y": 80,
        "wires": [
          [
            "{{_id}}-core-3"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-3",
        "type": "function",
        "name": "Format",
        "func": "msg = {\n    url: global.get('conveyor-api').url + '/flow/{{_url}}',\n    method: 'GET'\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 280,
        "y": 80,
        "wires": [
          [
            "{{_id}}-core-4"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-4",
        "type": "http request",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 430,
        "y": 80,
        "wires": [
          [
            "{{_id}}-core-39"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-5",
        "type": "function",
        "name": "",
        "func": "var parameters = msg.payload.parameters;\nvar parameterNames = [];\n\nparameters.forEach(function(param) {\n    parameterNames.push(param.key)\n    \n    flow.set(param.key, param.value)\n})\n\nflow.set('params', parameterNames);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 810,
        "y": 80,
        "wires": [
          []
        ]
      },
      {
        "id": "{{_id}}-core-6",
        "type": "comment",
        "name": "Configuration Endpoints",
        "info": "",
        "x": 150,
        "y": 140,
        "wires": []
      },
      {
        "id": "{{_id}}-core-7",
        "type": "http in",
        "name": "",
        "url": "/{{_url}}/config",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 180,
        "wires": [
          [
            "{{_id}}-core-8"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-8",
        "type": "function",
        "name": "",
        "func": "var paramNames = flow.get('params');\nvar parameters = {};\n\nparamNames.forEach(function(name) {\n    parameters[name] = flow.get(name);\n})\n\nmsg.payload = parameters\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 180,
        "wires": [
          [
            "{{_id}}-core-9"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-9",
        "type": "http response",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 810,
        "y": 180,
        "wires": []
      },
      {
        "id": "{{_id}}-core-10",
        "type": "http in",
        "name": "",
        "url": "/{{_url}}/config",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 220,
        "wires": [
          [
            "{{_id}}-core-11"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-11",
        "type": "function",
        "name": "",
        "func": "msg.payload = 'Post is currently not supported. Use PUT to update.'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 220,
        "wires": [
          [
            "{{_id}}-core-9"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-12",
        "type": "http in",
        "name": "",
        "url": "/{{_url}}/config",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 260,
        "wires": [
          [
            "{{_id}}-core-13"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-13",
        "type": "function",
        "name": "",
        "func": "var paramNames = flow.get('params');\nvar updates = [];\nvar errors = [];\n\nif (msg.payload) {\n    var paramsToUpdate = Object.keys(msg.payload);\n    \n    paramsToUpdate.forEach(function(update) {\n        if (paramNames.includes(update)) {\n            var updateParam = {\n                key: update,\n                value: msg.payload[update]\n            }\n            \n            updates.push(updateParam)\n        } else {\n            errors.push('Parameter [' + update + '] not valid.');\n        }\n    })\n} else {\n    errors.push('No Payload found');\n}\n\nif (errors.length > 0) {\n    msg.payload = errors\n} else {\n    updates.forEach(function(update) {\n        flow.set(update.key, update.value)\n    })\n    \n    var elasticParamsUpdate = [];\n    paramNames.forEach(function(param) {\n        elasticParamsUpdate.push({\n            \"key\": param,\n            \"value\": flow.get(param)\n        })\n    })\n    \n    msg.url = global.get('node-red').url + '/elasticsearch',\n    msg.method = 'POST',\n    msg.payload = {};\n    msg.payload.path = '/flow/default/{{_id}}/_update',\n    msg.payload.method = 'POST',\n    msg.payload.payload = {\n        \"doc\" : {\n        \"parameters\" : elasticParamsUpdate\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 260,
        "wires": [
          [
            "{{_id}}-core-18"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-14",
        "type": "http in",
        "name": "",
        "url": "/{{_url}}/config",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 300,
        "wires": [
          [
            "{{_id}}-core-15"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-15",
        "type": "function",
        "name": "",
        "func": "msg.payload = 'Delete is currently not supported. Use PUT to update.'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 300,
        "wires": [
          [
            "{{_id}}-core-9"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-16",
        "type": "http in",
        "name": "",
        "url": "/{{_url}}/config",
        "method": "patch",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 340,
        "wires": [
          [
            "{{_id}}-core-17"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-17",
        "type": "function",
        "name": "",
        "func": "msg.payload = 'Patch is currently not supported. Use PUT to update.'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 340,
        "wires": [
          [
            "{{_id}}-core-9"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-18",
        "type": "http request",
        "name": "",
        "method": "use",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 510,
        "y": 260,
        "wires": [
          [
            "{{_id}}-core-19"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-19",
        "type": "function",
        "name": "",
        "func": "if (msg.statusCode != 200) {\n    msg.payload = 'Local Flow Configuration Updated, but not persisted.',\n    msg.statusCode = 500\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 260,
        "wires": [
          [
            "{{_id}}-core-9"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-20",
        "type": "comment",
        "name": "Data Endpoints",
        "info": "",
        "x": 120,
        "y": 400,
        "wires": []
      },
      {
        "id": "{{_id}}-core-21",
        "type": "http in",
        "name": "",
        "url": "/{{_url}}/data",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 440,
        "wires": [
          [
            "{{_id}}-core-22"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-22",
        "type": "function",
        "name": "",
        "func": "msg.url = global.get('node-red').url + '/elasticsearch',\nmsg.method = 'POST',\nmsg.payload = {\n    path: '/{{_index}}/_search',\n    method: 'GET'\n}\n\nif (msg.req._parsedUrl.search) {\n    msg.payload.path += msg.req._parsedUrl.search\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 440,
        "wires": [
          [
            "{{_id}}-core-24"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-23",
        "type": "http in",
        "name": "",
        "url": "/{{_url}}/data/:id",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 600,
        "wires": [
          [
            "{{_id}}-core-37"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-24",
        "type": "http request",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 510,
        "y": 440,
        "wires": [
          [
            "{{_id}}-core-25"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-25",
        "type": "function",
        "name": "",
        "func": "var data = [];\n\nif (msg.payload.hits && msg.payload.hits.hits) {\n    data = msg.payload.hits.hits;    \n}\n\nmsg.payload = data\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 440,
        "wires": [
          [
            "{{_id}}-core-26"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-26",
        "type": "http response",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 810,
        "y": 520,
        "wires": []
      },
      {
        "id": "{{_id}}-core-27",
        "type": "http in",
        "name": "",
        "url": "/{{_url}}/data/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 480,
        "wires": [
          [
            "{{_id}}-core-28"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-28",
        "type": "function",
        "name": "",
        "func": "msg.url = global.get('node-red').url + '/elasticsearch',\nmsg.method = 'POST',\nmsg.payload = {\n    path: '/{{_index}}/default/' + msg.req.params.id,\n    method: 'GET'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 480,
        "wires": [
          [
            "{{_id}}-core-29"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-29",
        "type": "http request",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 510,
        "y": 480,
        "wires": [
          [
            "{{_id}}-core-30"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-30",
        "type": "function",
        "name": "",
        "func": "if (msg.payload.found === true && msg.payload._source) {\n    var data = msg.payload._source;\n}\n\nmsg.payload = data\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 480,
        "wires": [
          [
            "{{_id}}-core-26"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-31",
        "type": "http request",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 510,
        "y": 520,
        "wires": [
          [
            "{{_id}}-core-26"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-32",
        "type": "httpInMultipart",
        "name": "",
        "url": "/{{_url}}/data",
        "method": "post",
        "fields": "",
        "swaggerDoc": "",
        "x": 160,
        "y": 520,
        "wires": [
          [
            "{{_id}}-core-33"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-33",
        "type": "function",
        "name": "",
        "func": "var body = msg.payload;\n\nmsg.url = global.get('node-red').url + '/elasticsearch',\nmsg.method = 'POST',\nmsg.payload = {\n    path: '/{{_index}}/default',\n    method: 'POST',\n    payload: body\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 520,
        "wires": [
          [
            "{{_id}}-core-31"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-34",
        "type": "http in",
        "name": "",
        "url": "/{{_url}}/data/:id",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 560,
        "wires": [
          [
            "{{_id}}-core-35"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-35",
        "type": "function",
        "name": "",
        "func": "var body = msg.payload;\n\nmsg.url = global.get('node-red').url + '/elasticsearch',\nmsg.method = 'POST',\nmsg.payload = {\n    path: '/{{_index}}/default/' + msg.req.params.id,\n    method: 'PUT',\n    payload: body\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 560,
        "wires": [
          [
            "{{_id}}-core-36"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-36",
        "type": "http request",
        "name": "",
        "method": "use",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 510,
        "y": 560,
        "wires": [
          [
            "{{_id}}-core-26"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-37",
        "type": "function",
        "name": "",
        "func": "msg.url = global.get('node-red').url + '/elasticsearch',\nmsg.method = 'POST',\nmsg.payload = {\n    path: '/{{_index}}/default/' + msg.req.params.id,\n    method: 'DELETE'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 600,
        "wires": [
          [
            "{{_id}}-core-38"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-38",
        "type": "http request",
        "name": "",
        "method": "use",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 510,
        "y": 600,
        "wires": [
          [
            "{{_id}}-core-26"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-39",
        "type": "switch",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
          {
            "t": "eq",
            "v": "200",
            "vt": "num"
          },
          {
            "t": "else"
          }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 570,
        "y": 80,
        "wires": [
          [
            "{{_id}}-core-5"
          ],
          [
            "{{_id}}-core-40"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-40",
        "type": "delay",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 440,
        "y": 120,
        "wires": [
          [
            "{{_id}}-core-3"
          ]
        ]
      },
      {
        "id": "{{_id}}-1",
        "type": "flat",
        "name": "",
        "safe": "!1",
        "x": 280,
        "y": 700,
        "wires": [
          [
            "{{_id}}-2"
          ]
        ]
      },
      {
        "id": "{{_id}}-2",
        "type": "function",
        "name": "",
        "func": "var index = \"{{_index}}\"\n\nvar createdAt = msg.payload['created_at']\nmsg.payload['created_at'] = new Date(Date.parse(createdAt.replace(/( \\+)/, ' UTC$1')));\n\nvar operation = {\n    \"_id\": msg.payload[\"id\"],\n    \"_index\": index,\n    \"_type\": \"default\"\n    }\n\nvar msg1 = {\n    payload: JSON.stringify({\"index\": operation})\n}\n\nvar msg2 = {\n    payload: JSON.stringify(msg.payload)\n}\n\nreturn [[msg1,msg2]];",
        "outputs": "1",
        "noerr": 0,
        "x": 420,
        "y": 700,
        "wires": [
          [
            "{{_id}}-3"
          ]
        ]
      },
      {
        "id": "{{_id}}-3",
        "type": "join",
        "name": "",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "!1",
        "timeout": "",
        "count": "1000",
        "x": 560,
        "y": 700,
        "wires": [
          [
            "{{_id}}-4"
          ]
        ]
      },
      {
        "id": "{{_id}}-4",
        "type": "function",
        "name": "Add Trailing New Line",
        "func": "var payloadIn = msg.payload;\npayloadIn += \"\\n\";\n\nmsg.url = global.get('node-red').url + '/elasticsearch'\nmsg.method = 'POST',\nmsg.payload = {\n    path: '/{{_index}}/default/_bulk',\n    method: 'POST',\n    payload: payloadIn\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 750,
        "y": 700,
        "wires": [
          [
            "{{_id}}-5"
          ]
        ]
      },
      {
        "id": "{{_id}}-5",
        "type": "http request",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 960,
        "y": 700,
        "wires": [
          []
        ]
      },
      {
        "id": "{{_id}}-6",
        "type": "trigger",
        "op1": "",
        "op2": "true",
        "op1type": "nul",
        "op2type": "bool",
        "duration": "2",
        "extend": "!0",
        "units": "s",
        "reset": "",
        "name": "",
        "x": 270,
        "y": 740,
        "wires": [
          [
            "{{_id}}-7"
          ]
        ]
      },
      {
        "id": "{{_id}}-7",
        "type": "function",
        "name": "",
        "func": "delete msg.payload\nmsg.complete = true\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 440,
        "y": 740,
        "wires": [
          [
            "{{_id}}-3"
          ]
        ]
      },
      {
        "id": "{{_id}}-8",
        "type": "Twitter Stream",
        "connection": "{{_id}}-9",
        "follow": "{{users}}",
        "topics": "{{topics}}",
        "tweetLimit": "0",
        "onlyVerified": "{{verified}}",
        "topicRetweets": "{{retweets}}",
        "loadImages": false,
        "topicLanguage": "en",
        "debug": false,
        "name": "",
        "x": 120,
        "y": 700,
        "wires": [
          [
            "{{_id}}-1",
            "{{_id}}-6"
          ]
        ]
      },
      {
          "id": "{{_id}}-10",
          "type": "comment",
          "name": "Primary Flow",
          "info": "",
          "x": 110,
          "y": 660,
          "wires": []
      },
      {
        "id": "{{_id}}-9",
        "type": "twitter-api-connection",
        "consumerKey": "{{consumerKey}}",
        "consumerSecret": "{{consumerSecret}}",
        "accessToken": "{{accessToken}}",
        "accessSecret": "{{accessSecret}}"
      }
    ]
  }
}